<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QtCreatorProject>
<!-- Written by QtCreator 6.0.2, 2022-06-17T19:48:47. -->
<qtcreator>
 <data>
  <variable>EnvironmentId</variable>
  <value type="QByteArray">{38c56caf-385f-4ccb-877c-ef448a386162}</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.ActiveTarget</variable>
  <value type="int">0</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.EditorSettings</variable>
  <valuemap type="QVariantMap">
   <value type="bool" key="EditorConfiguration.AutoIndent">true</value>
   <value type="bool" key="EditorConfiguration.AutoSpacesForTabs">false</value>
   <value type="bool" key="EditorConfiguration.CamelCaseNavigation">true</value>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.0">
    <value type="QString" key="language">Cpp</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QByteArray" key="CurrentPreferences">CppGlobal</value>
    </valuemap>
   </valuemap>
   <valuemap type="QVariantMap" key="EditorConfiguration.CodeStyle.1">
    <value type="QString" key="language">QmlJS</value>
    <valuemap type="QVariantMap" key="value">
     <value type="QByteArray" key="CurrentPreferences">QmlJSGlobal</value>
    </valuemap>
   </valuemap>
   <value type="int" key="EditorConfiguration.CodeStyle.Count">2</value>
   <value type="QByteArray" key="EditorConfiguration.Codec">UTF-8</value>
   <value type="bool" key="EditorConfiguration.ConstrainTooltips">false</value>
   <value type="int" key="EditorConfiguration.IndentSize">4</value>
   <value type="bool" key="EditorConfiguration.KeyboardTooltips">false</value>
   <value type="int" key="EditorConfiguration.MarginColumn">80</value>
   <value type="bool" key="EditorConfiguration.MouseHiding">true</value>
   <value type="bool" key="EditorConfiguration.MouseNavigation">true</value>
   <value type="int" key="EditorConfiguration.PaddingMode">1</value>
   <value type="bool" key="EditorConfiguration.PreferSingleLineComments">false</value>
   <value type="bool" key="EditorConfiguration.ScrollWheelZooming">true</value>
   <value type="bool" key="EditorConfiguration.ShowMargin">false</value>
   <value type="int" key="EditorConfiguration.SmartBackspaceBehavior">0</value>
   <value type="bool" key="EditorConfiguration.SmartSelectionChanging">true</value>
   <value type="bool" key="EditorConfiguration.SpacesForTabs">true</value>
   <value type="int" key="EditorConfiguration.TabKeyBehavior">0</value>
   <value type="int" key="EditorConfiguration.TabSize">8</value>
   <value type="bool" key="EditorConfiguration.UseGlobal">true</value>
   <value type="bool" key="EditorConfiguration.UseIndenter">false</value>
   <value type="int" key="EditorConfiguration.Utf8BomBehavior">1</value>
   <value type="bool" key="EditorConfiguration.addFinalNewLine">true</value>
   <value type="bool" key="EditorConfiguration.cleanIndentation">true</value>
   <value type="bool" key="EditorConfiguration.cleanWhitespace">true</value>
   <value type="QString" key="EditorConfiguration.ignoreFileTypes">*.md, *.MD, Makefile</value>
   <value type="bool" key="EditorConfiguration.inEntireDocument">false</value>
   <value type="bool" key="EditorConfiguration.skipTrailingWhitespace">true</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.PluginSettings</variable>
  <valuemap type="QVariantMap">
   <valuemap type="QVariantMap" key="AutoTest.ActiveFrameworks">
    <value type="bool" key="AutoTest.Framework.Boost">true</value>
    <value type="bool" key="AutoTest.Framework.CTest">false</value>
    <value type="bool" key="AutoTest.Framework.Catch">true</value>
    <value type="bool" key="AutoTest.Framework.GTest">true</value>
    <value type="bool" key="AutoTest.Framework.QtQuickTest">true</value>
    <value type="bool" key="AutoTest.Framework.QtTest">true</value>
   </valuemap>
   <valuemap type="QVariantMap" key="AutoTest.CheckStates">
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:BaseWidget's children in gui/dataWidgets correctly constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:FileWatcherWidgets are correctly constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:InfoWidgets are correctly constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:TabbedWidgets are correctly constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:TransferFunction widgets are correctly constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestCatchBaseWidgets.cpp:VideoConnectionWidget is correctly constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Active tool selected as default">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Data type selector can turn images on/off">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Insert data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Remember clipping in mesh when changing clipper">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Select active tool works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Select all data checks mesh checkbox">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Select all data is unchecked when mesh is unchecked">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Select all data is updated when changing clipper">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Select tool other than active works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Turn clipping on/off for a mesh">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:ClipperWidget: Turn clipping on/off for an image">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClipperWidget.cpp:InteractiveClipper: Attach to tool/no tool updates all SliceProxy objects">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:ClippersWidget: Automatic naming of new clipper">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:ClippersWidget: Create new clipper">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:ClippersWidget: Load clipper names">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:ClippersWidget: New patient gets default clippers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:ClippersWidget: Select clipper">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestClippersWidget.cpp:VisServices: Init default clippers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestEraserWidget.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestEraserWidget.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestEraserWidget.cpp:EraserWidget: Duplicate slot, test no crash for empty patient">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestEraserWidget.cpp:EraserWidget: Remove slot, test no crash for empty patient">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestEraserWidget.cpp:EraserWidget: Save slot, test no crash for empty patient">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestMetricsWidget.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestMetricsWidget.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestMetricsWidget.cpp:Export and import metrics to and from file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestMetricsWidget.cpp:Import metrics from a patient XML file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestMetricsWidget.cpp:Save the patient and import metrics from the patient XML file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp:OpenCL and Gui: Init OpenCL and show a button">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp:OpenCL and Gui: Show a button and init OpenCL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp:OpenCL and OpenGl: Init OpenCL and show a OpenGL view.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp:OpenCL and OpenGl: Show a cx::ViewWidget (OpenGL) and init OpenCL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestOpenCLAndGui.cpp:OpenCL and OpenGl: Show a vtkRenderWindow (OpenGL) and init OpenCL">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestProfileChange.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestProfileChange.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestProfileChange.cpp:Profile change with running gui">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSelectClippersForDataWidget.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSelectClippersForDataWidget.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSelectClippersForDataWidget.cpp:SelectClippersForDataWidget: Data checkboxes are updated when clipper changes">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSelectClippersForDataWidget.cpp:SelectClippersForDataWidget: Init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSelectClippersForDataWidget.cpp:SelectClippersForDataWidget: Using data checkboxes updates clippers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSelectClippersForDataWidget.cpp:SelectClippersForDataWidget: Using invert checkboxes updates clippers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:CustusX full run emits no errors, correct service shutdown.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: Render time of vtkRenderWindow">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: vtkGPUVolumeRayCastMapper render">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: vtkGPUVolumeRayCastMapper with slicing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: vtkOpenGLGPUMultiVolumeRayCastMapper renderer">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: vtkOpenGLGPUMultiVolumeRayCastMapper with slicing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: vtkVolumeTextureMapper3D render, optimizedViews off">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestSpeed.cpp:Speed: vtkVolumeTextureMapper3D render, optimizedViews on">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestTransferFunctionWidgets.cpp:/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestTransferFunctionWidgets.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/gui/testing/cxtestTransferFunctionWidgets.cpp:Correct ColorTFBoundaries calculated for default transfer function">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestPlugins.cpp:/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestPlugins.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestPlugins.cpp:LogicManager: Load one core plugin (PatientModelService)">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestPlugins.cpp:LogicManager: init and shutdown without it posting the warning: QObject::killTimer: timers cannot be stopped from another thread">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestStreamerService.cpp:/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestStreamerService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/logic/testing/cxtestStreamerService.cpp:StreamerService: Service available">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.acquisition/testing/cxtestAcquisition.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.acquisition/testing/cxtestAcquisition.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.acquisition/testing/cxtestUSSavingRecorder.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.acquisition/testing/cxtestUSSavingRecorder.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Benchmark">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test Invalid parameters">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test error handler">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 1">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 1 unit">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 10, cross movement">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 2">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 3">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 4">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 5">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 5 unit">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 6">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 7, aliasing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 8, aliasing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 8, aliasing, unit">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation 9, cross movement">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation tumour data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test flow direction estimation tumour data, unit">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test several runs">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test several runs cl pointer input">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/core/Tests/MethodTests.cpp:AngleCorrection: Test several runs cl pointer input simple">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/testing/cxtestAngleCorr.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/testing/cxtestAngleCorr.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.anglecorrection/testing/cxtestAngleCorr.cpp:AngleCorrection: Test gui plugin with several runs">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.calibration/testing/cxtestTemporalCalibration.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.calibration/testing/cxtestTemporalCalibration.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.calibration/testing/cxtestTemporalCalibration.cpp:TemporalCalibration reproduces old results on a test data set">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.ceetron/testing/cxtestCeetronPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.ceetron/testing/cxtestCeetronPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.ceetron/testing/cxtestCeetronPlugin.cpp:CgeoReaderWriter: Convert to QByteArray">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.ceetron/testing/cxtestCeetronPlugin.cpp:CgeoReaderWriter: Write file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestDataReaderWriter.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestDataReaderWriter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestDataReaderWriter.cpp:Import Kaisa from DICOM">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestDataReaderWriter.cpp:Import MNI Tag Point file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestToolFiles.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestToolFiles.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestToolFiles.cpp:Sonowand intraop navigator STL file are readable">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.filemanager/testing/cxtestToolFiles.cpp:Sonowand planning navigator STL file are readable">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp:Can connect to a igtlioQtClient server">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp:Can connect to a plus server and receive messages">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp:Connect client to server">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp:Connect/disconnect using NetworkHandler, use default network port">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkIO.cpp:Stop and remove client and server connectors works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:NetworkHandler: Test timestamp synchronization">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:NetworkHandler: Test timestamp synchronization reset">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:NetworkHandler: Test timestamp verification">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: Test configure state using tool config file for Plus">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: Test state transitions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: Test timestamp synchronization">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: Test tool config files, and apply ref transform">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: Test tool files with OpenIGTLink id">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: print openigtlinktransformid warning">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestOpenIGTLinkTrackingSystemService.cpp:OpenIGTLinkTrackingSystemService: receiveTransform print openigtlinktransformid warning">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestProbeDefinitionFromStringMessages.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestProbeDefinitionFromStringMessages.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestProbeDefinitionFromStringMessages.cpp:ProbeDefinitionFromStringMessages create ProbeDefinition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestProbeDefinitionFromStringMessages.cpp:ProbeDefinitionFromStringMessages init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestProbeDefinitionFromStringMessages.cpp:ProbeDefinitionFromStringMessages require valid parameters">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.openigtlink3/testing/cxtestProbeDefinitionFromStringMessages.cpp:ProbeDefinitionFromStringMessages set/get values">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchDistanceMetric.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchDistanceMetric.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchDistanceMetric.cpp:DistanceMetric can save/load XML">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchDistanceMetric.cpp:DistanceMetric composed of a point and plane gives a correct distance">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchDistanceMetric.cpp:DistanceMetric composed of two points gives a correct distance">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchFrameMetric.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchFrameMetric.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchFrameMetric.cpp:cxFrameMetric can save/load XML">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchFrameMetric.cpp:cxFrameMetric can set space correctly">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchFrameMetric.cpp:cxFrameMetric can set/get transform">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp:ActiveData: Set using uid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp:ActiveData: save/load in patient file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp:DataManagerImpl setup/shutdown works multiple times">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp:Operating table set and get">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchPatientService.cpp:StringPropertyActiveData works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchToolMetric.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchToolMetric.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchToolMetric.cpp:ToolMetric can get a valid reference coordinate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchToolMetric.cpp:ToolMetric can save/load XML">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchToolMetric.cpp:ToolMetric can set space correctly">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestCatchToolMetric.cpp:ToolMetric can set/get tool data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestPatientModelPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestPatientModelPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestPatientModelPlugin.cpp:PatientModelPlugin: makeAvailable works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestPatientStorage.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestPatientStorage.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.patientmodel/testing/cxtestPatientStorage.cpp:PatientStorage save/load works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp:Tool configuration files">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp:Tool xml files got existing image files">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp:Tool xml files use tracking systems supported by ToolManagerUsingIGSTK">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp:Verify that saveConfiguration do not loose information">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking.system.igstk/testing/cxtestToolFiles.cpp:Verify tool xml files">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestCatchProbe.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestCatchProbe.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestCatchTrackingService.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestCatchTrackingService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestCatchTrackingService.cpp:DummyToolManager setup/shutdown works multiple times">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestTrackingPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestTrackingPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestTrackingPlugin.cpp:TrackingImplService: CurrentTrackingSystemImplementation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestTrackingPlugin.cpp:TrackingImplService: Init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.tracking/testing/cxtestTrackingPlugin.cpp:TrackingPlugin: Check nothing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxCatchVideo.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxCatchVideo.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxCatchVideo.cpp:DummyImageStreamer: File should be read and send slices with a given interval">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxCatchVideo.cpp:DummyImageStreamer: File should be read and sent only once">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxtestCatchStreamingWidgets.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxtestCatchStreamingWidgets.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxtestCatchStreamingWidgets.cpp:VideoConnectionWidget can stream">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxtestVideoPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxtestVideoPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.video/testing/cxtestVideoPlugin.cpp:VideoPlugin: Check nothing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 0 reps using invalid type for 1 added image.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 1 rep using Image2DRep3D for 1 added 2D image, for any visualizer type.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 1 rep using vtkGPUVolumeRayCastMapper for 1 added image.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 1 rep using vtkOpenGLGPUMultiVolumeRayCastMapper for 3 added images.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 1 rep using vtkVolumeTextureMapper3D for 1 added image.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 2 reps using vtkVolumeTextureMapper3D for 3 added and 1 removed image(s).">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer creates 3 reps using vtkVolumeTextureMapper3D for 3 added images.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchMultiVolume3DRepProducer.cpp:MultiVolume3DRepProducer emits imageChanged and repChanged signals for 1 added image.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchViewRenderSpeed.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchViewRenderSpeed.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchViewRenderSpeed.cpp:Speed: Render 10 empty viewWidgets, optimizedViews off">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestCatchViewRenderSpeed.cpp:Speed: Render 10 empty viewWidgets, optimizedViews on">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestDataTypeSort.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestDataTypeSort.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestDataTypeSort.cpp:Sort cx::Data user-friendly using getPriority()">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestGeometricRep.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestGeometricRep.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestGeometricRep.cpp:Visual rendering: Load and show mesh with texture, stl">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestGeometricRep.cpp:Visual rendering: Load and show mesh with texture, vtk">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestGeometricRep.cpp:Visual rendering: Load and show mesh with texture, vtp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp:NavigationAlgorithms: elevateCamera">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp:NavigationAlgorithms: elevateCamera complex">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp:NavigationAlgorithms: findCameraPosByZoomingToROI">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp:NavigationAlgorithms: findCameraPosOnLineFixedDistanceFromFocus ">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestNavigationAlgorithms.cpp:NavigationAlgorithms: orthogonalize_vup">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestRendering.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestRendering.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestRendering.cpp:Render volume with texture mapper and text overlay">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewGroup.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewGroup.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewGroup.cpp:ViewGroup: ActiveData don't change if ActiveImage is in view group">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewGroup.cpp:ViewGroup: ActiveImage change if ActiveImage is not in view group">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewGroup.cpp:ViewGroup: get ActiveData">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewService: Add new default layout">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewService: Get active view group">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewService: Get camera style interactor action group and actions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewService: Setting camera style also marks action as selected in camera style action group">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewService: set/get camera style">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewWrapper2D: Emits pointSampled signal when anyplane">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewWrapper: ActiveTool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewWrapper: Changing active tool also changes controlling tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewWrapper: Controlling tool equals active tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewWrapper: Resetting controlling tool reverts back to using active tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewPlugin.cpp:ViewWrapper: Setting controlling tool overrides active tool for view">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewService.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewService.cpp:Can turn custom context menu off">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestViewService.cpp:ViewService: Auto show in view groups">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Empty QVTKWidget">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Empty view">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Experimental Show Axial GPU slice, 1 dummy volume">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Init view">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Overlapping gridlayout">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Several empty views in a sequence.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show 3D volume - vtkGPU render">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show 3D+AnyDual, centered hidden tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show ACS+3D, centered hidden tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show ACS, 3 GPU volumes, not optimized views">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show ACS, 3 GPU volumes, optimized views">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show ACS, 3 volumes">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show AnyDual+3D, centered hidden tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show Axial GPU slice, 1 volume">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show Axial GPU slice, 2 volumes">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.core.view/testing/cxtestVisualRendering.cpp:Visual rendering: Show layout, clear, show new layout">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.accusurf/testing/cxtestAccusurfFilter.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.accusurf/testing/cxtestAccusurfFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.accusurf/testing/cxtestAccusurfFilter.cpp:AccusurfFilter: execute">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.airways/testing/cxtestAirways.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.airways/testing/cxtestAirways.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.airways/testing/cxtestAirways.cpp:Airway segmentation on test data pat011 works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.airwaysfromcenterline/testing/cxtestAirwaysFromCenterlineFilter.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.airwaysfromcenterline/testing/cxtestAirwaysFromCenterlineFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.filter.airwaysfromcenterline/testing/cxtestAirwaysFromCenterlineFilter.cpp:AirwaysFromCenterline: execute">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.help/testing/cxtestHelpPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.help/testing/cxtestHelpPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.help/testing/cxtestHelpPlugin.cpp:org.custusx.help: HelpEngine loads a page">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.help/testing/cxtestHelpPlugin.cpp:org.custusx.help: HelpWidget displays Console Widget help on focus">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.help/testing/cxtestHelpPlugin.cpp:org.custusx.help: HelpWidget displays initial help text">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp:Test the connect branches to a single poly data object, fully connected">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp:Test the connect branches to a single poly data object, fully connected and straight lines">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp:Test the connect branches to a single poly data object, original - i.e. branches are not fully connected">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp:Test the find number of branches in the dummy centerline">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.bronchoscopy/testing/cxtestBranchHandling.cpp:Test the findParentIndex method">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.centerline/testing/cxtestCenterlineRegistration.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.centerline/testing/cxtestCenterlineRegistration.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.centerline/testing/cxtestCenterlineRegistration.cpp:CenterlineRegistration: execute">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.commandline/testing/cxtestCatchElastix.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.commandline/testing/cxtestCatchElastix.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.commandline/testing/cxtestCatchElastix.cpp:ElastiX should register kaisa to a translated+resampled version of same">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestFastPatientRegistration.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestFastPatientRegistration.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestFastPatientRegistration.cpp:FastPatientRegistrationWidget: Receive pointSampled signals when sample with mouse click is on">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestFastPatientRegistration.cpp:FastPatientRegistrationWidget: Sample with mouse click is turned on/off when widget is shown/hidden">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestFastPatientRegistration.cpp:FastPatientRegistrationWidget: Test getting next landmark when landmark list is empty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestLandmarkPatientRegistration.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestLandmarkPatientRegistration.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.landmark/testing/cxtestLandmarkPatientRegistration.cpp:RegistrationPlugin: Patient landmarks visible after registering, save, quit and load patient">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.manual/testing/cxtestRegistrationMethodManual.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.manual/testing/cxtestRegistrationMethodManual.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.manual/testing/cxtestRegistrationMethodManual.cpp:RegistrationMethodManual: Verify Image-to-Image registration with known Fixed and Moving image data - \&#10;Four landmarks defined for accuracy verification">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.manual/testing/cxtestRegistrationMethodManual.cpp:RegistrationMethodManual: Verify Image-to-Image registration with known Fixed and Moving image data - \&#10;No landmarks defined">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.manual/testing/cxtestRegistrationMethodManual.cpp:RegistrationMethodManual: Verify Image-to-Image registration with known Fixed and Moving image data - \&#10;One landmark defined for accuracy verification">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration.method.manual/testing/cxtestRegistrationMethodManual.cpp:RegistrationMethodManual: Verify correct operation when registration history is empty">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestCatchSeansVesselReg.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestCatchSeansVesselReg.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationApplicator.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationApplicator.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationApplicator.cpp:org.custusx.registration: I2I reg, moving and fixed on root">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationApplicator.cpp:org.custusx.registration: I2I reg, moving tree">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationApplicator.cpp:org.custusx.registration: I2I reg, moving tree on root">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationApplicator.cpp:org.custusx.registration: I2I reg, simple">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationPlugin.cpp:RegistrationPlugin: Check RegistrationServiceNull">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationPlugin.cpp:RegistrationPlugin: Check empty RegistrationImplService">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationPlugin.cpp:RegistrationPlugin: RegistrationService available">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationServiceProxy.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationServiceProxy.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.registration/testing/cxtestRegistrationServiceProxy.cpp:RegistrationServiceProxy works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.pnn/testing/cxtestPNNPlugin.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.pnn/testing/cxtestPNNPlugin.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.pnn/testing/cxtestPNNPlugin.cpp:ReconstructAlgorithm: PNN on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.pnn/testing/cxtestPNNPlugin.cpp:ReconstructAlgorithm: PNN on sphere, tilt">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: Anisotropic on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: Anisotropic on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: DW on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: DW on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN Closest on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN Multistart on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN multistart on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN2 on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction.vnncl/testing/cxtestVNNclReconstructionService.cpp:VNNcl: VNN2 on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestPositionFilter.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestPositionFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestPositionFilter.cpp:PositionFilter: Filter active">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestPositionFilter.cpp:PositionFilter: Filter inactive">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestPositionFilter.cpp:PositionFilter: Init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp:/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp:ReconstructManager: Angio Reconstruction on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp:ReconstructManager: PNN on angio sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp:ReconstructManager: PNN on sphere">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp:ReconstructManager: Preprocessor handles too large clip rect">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/plugins/org.custusx.usreconstruction/testing/cxtestReconstructionManager.cpp:ReconstructManager: Threaded Dual Angio on real data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:IGTLinkConversion: Decode/encode ProbeDefinition">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:IGTLinkConversion: Decode/encode color image ARGB">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:IGTLinkConversion: Decode/encode color image BGR">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:IGTLinkConversion: Decode/encode color image RGBA">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:IGTLinkConversion: Decode/encode image">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/OpenIGTLinkUtilities/testing/cxtestCatchIGTLinkConversion.cpp:IGTLinkConversion: is created">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Active Image - activeImageChanged signal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Active Image set/get">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Call set multiple times">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Get data of specific type">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Get image from TrackedStream with VideoSource">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Get images both from Image and TrackedStream">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: Get using type regexp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: activeDataChanged signal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: getActiveImageUid">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: remove">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestActiveData.cpp:ActiveData: set/get">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: Can be created from a point cloud">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: Constructors OK">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: Contains OK">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: Convert to QString and back">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: Getters OK">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: Similar OK">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchBoundingBox3D.cpp:DoubleBoundingBox3D: intersection">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchFrame.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchFrame.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchFrame.cpp:Frame3D works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchImageAlgorithms.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchImageAlgorithms.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchImageAlgorithms.cpp:ImageAlgorithms: resample() works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchProcessWrapper.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchProcessWrapper.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchProcessWrapper.cpp:ProcessWrapper can be constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchProcessWrapper.cpp:ProcessWrapper can check git -version">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchProcessWrapper.cpp:ProcessWrapper can handle launching of not existing executables">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchProcessWrapper.cpp:ProcessWrapper can run VLC -version">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSharedMemory.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSharedMemory.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSharedMemory.cpp:SharedMemory works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp:SliceComputer handles ACS using fixed center">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp:SliceComputer handles ACS using follow tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp:SliceComputer handles TOOLSIDE plane using follow tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp:SliceComputer handles anyplanes using follow tool">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchSliceComputer.cpp:SliceComputer is created">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchStringHelpers.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchStringHelpers.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchStringHelpers.cpp:splitStringContaingQuotes keeps elements with double quotes and a space">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchStringHelpers.cpp:splitStringContaingQuotes keeps elements with double quotes and several spaces">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchStringHelpers.cpp:splitStringContaingQuotes splits a simple list">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchStringHelpers.cpp:splitStringContaingQuotes work with an element with double quotes and no space">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Can be inverted">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Can be multiplied">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Convert to QString and back">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Convert to vtkMatrix4x4 and back">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Different transforms are not similar">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Element access">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Equal transforms are similar">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Free vectors and points are correctly transformed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Identity transform has no effect on vector">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: Inserted elements equals accessed elements">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: createTransformRotate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchTransform3D.cpp:Transform3D: createTransformTranslate">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVLCRecorder.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVLCRecorder.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVLCRecorder.cpp:QProcess and VLC can use cli for starting and stopping screen capture.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVLCRecorder.cpp:VLCRecorder can be constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVLCRecorder.cpp:VLCRecorder can find VLC application">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVLCRecorder.cpp:VLCRecorder can record for 15 seconds">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVector3D.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVector3D.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCatchVector3D.cpp:Vector3D works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCoreServices.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCoreServices.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestCoreServices.cpp:Core test services correctly contructed/destructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestDataLocations.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestDataLocations.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestDataLocations.cpp:Uploads url is set">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestDataLocations.cpp:User documentation url is set">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestDataLocations.cpp:Website url can be set">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp:Image sub type conversions, convertToImageSubType function">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp:ImageModality conversions, convertToModality function">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp:ImageModality conversions, emum to string">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp:ImageModality conversions, string to enum">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestEnumConversion.cpp:Lung structures conversions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Can load Mhd files as images">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Can load NIfTi files as images">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image copy: Voxels equal">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image copy: id copied">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image copy: vtkImage copied">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image initial window imported">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image initial window is kept after changing transfer function">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image: Changed initial window is kept after using addXml and parseXml">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image: Initial window from mdh file is kept after using addXml and parseXml">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImage.cpp:Image: Initial window is kept after using UnsignedDerivedImage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:ImageParameters empty constructor init all variables">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:ImageParameters: Constructed from bounds and spacing gives correct dim">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:ImageParameters: Existing functionality in OutputVolumeParams is kept">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:ImageParameters: changeToUniformSpacing() works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:ImageParameters: limitVoxelsKeepBounds() works">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestImageParameters.cpp:ImageParameters: limitVoxelsKeepBounds() works with non uniform spacing">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestOpenCLPrinter.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestOpenCLPrinter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestOpenCLPrinter.cpp:OpenCLPrinter: print info about platform and devices">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestProbeDefinition.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestProbeDefinition.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestProbeDefinition.cpp:ProbeDefinition can be constructed">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestProbeDefinition.cpp:ProbeDefinition: Validating set/get">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestProbeDefinition.cpp:ProbeDefinition: Validating set/get with dummy values">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestReporter.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestReporter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestReporter.cpp:Reporter can be run multiple times">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestReporter.cpp:Reporter can be run nested">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestReporter.cpp:Reporter can catch cout">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestReporter.cpp:Reporter: MessageListener receives messages">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestStreamedTimestampSynchronizer.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestStreamedTimestampSynchronizer.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestStreamedTimestampSynchronizer.cpp:StreamedTimestampSynchronizer: Outlayers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestStreamedTimestampSynchronizer.cpp:StreamedTimestampSynchronizer: convergence to new value">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestStreamedTimestampSynchronizer.cpp:StreamedTimestampSynchronizer: many ts and outliers">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestStreamedTimestampSynchronizer.cpp:StreamedTimestampSynchronizer: one ts">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingPositionFilter.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingPositionFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingPositionFilter.cpp:TrackingPositionFilter: Check if interpolation is correct">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingPositionFilter.cpp:TrackingPositionFilter: No positions return identity">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingPositionFilter.cpp:TrackingPositionFilter: One position is transmitted unchanged">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingSystemService.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingSystemService.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingSystemService.cpp:TrackingSystemService: Convenience state transitions">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestTrackingSystemService.cpp:TrackingSystemService: Init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp:XmlOptionFile: Multiple instances share data">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp:XmlOptionFile: Write and read QVariant-QColor">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp:XmlOptionFile: Write and read QVariant-int">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp:XmlOptionFile: Write and read value in-memory">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/testing/cxtestXmlOptionFile.cpp:XmlOptionFile: Writing to file using one instance, then loading using another">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/usReconstructionTypes/testing/cxtestCatchUSReconstructionFile.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/usReconstructionTypes/testing/cxtestCatchUSReconstructionFile.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/usReconstructionTypes/testing/cxtestUSReconstructInputDataAlgorithms.cpp:/home/shu/dev/cx/CX/CX/source/resource/core/usReconstructionTypes/testing/cxtestUSReconstructInputDataAlgorithms.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/core/usReconstructionTypes/testing/cxtestUSReconstructInputDataAlgorithms.cpp:Slerp Interpolation">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestBinaryThresholdImageFilter.cpp:/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestBinaryThresholdImageFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestBinaryThresholdImageFilter.cpp:BinaryThresholdImageFilter: update threshold with no image selected">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestColorVariationFilter.cpp:/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestColorVariationFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestColorVariationFilter.cpp:ColorVariationFilter: execute">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestDilationFilter.cpp:/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestDilationFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestDilationFilter.cpp:DilationFilter: execute">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Create">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Create environment">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Detailed test of option adapters">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Get output from process">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Read generated file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Read generated file fails with no input">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Read python_Lungs_testing.ini file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Set input and execute">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Set input and execute for machine learning">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Set output colors">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Test ProcessWrapper simple usage">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Test environment">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/filter/testing/cxtestScriptFilter.cpp:GenericScriptFilter: Test running of external process">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/videoServer/testing/cxtestSonixProbeFileReader.cpp:/home/shu/dev/cx/CX/CX/source/resource/videoServer/testing/cxtestSonixProbeFileReader.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/videoServer/testing/cxtestSonixProbeFileReader.cpp:SonixProbeFileReader can process XML file">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: One high-res image inside another">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: One image">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: One image inside another">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: One rotated high-res image inside another">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: Two nonoverlapping images">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: Two nonoverlapping images, negative shift">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestImageEnveloper.cpp:ImageEnveloper: Two overlapping images">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestMultiViewCache.cpp:/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestMultiViewCache.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestMultiViewCache.cpp:MultiViewCache init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestMultiViewCache.cpp:MultiViewCache retrieveView 2D">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestMultiViewCache.cpp:MultiViewCache retrieveView 3D">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:RenderWindowFactory get render window">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:RenderWindowFactory init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:RenderWindowFactory init shared render window">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:RenderWindowFactory render">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:RenderWindowFactory render a single renderWindow">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:RenderWindowFactory render in render window">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestRenderWindowFactory.cpp:Speed: Render time of vtkOpenGLRenderWindow">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext can delete uploaded resources.">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext download texture">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext render">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext upload and download many textures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext upload many large textures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext upload many textures">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestSharedOpenGLContext.cpp:SharedOpenGLContext upload texture">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestStream2DRep3D.cpp:/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestStream2DRep3D.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestStream2DRep3D.cpp:Stream2DRep3D Set TrackedStream">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestStream2DRep3D.cpp:Stream2DRep3D init">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestVideoGraphics.cpp:/home/shu/dev/cx/CX/CX/source/resource/view/testing/cxtestVideoGraphics.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/widgets/testing/cxtestOptionsWidget.cpp:/home/shu/dev/cx/CX/CX/source/resource/widgets/testing/cxtestOptionsWidget.cpp">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/widgets/testing/cxtestOptionsWidget.cpp:OptionsWidget with no options (and hence no advanced options)">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/widgets/testing/cxtestOptionsWidget.cpp:OptionsWidget with one advanced option">Checked</value>
    <value type="Qt::CheckState" key="1@/home/shu/dev/cx/CX/CX/source/resource/widgets/testing/cxtestOptionsWidget.cpp:OptionsWidget with one option which is not advanced">Checked</value>
   </valuemap>
   <value type="int" key="AutoTest.RunAfterBuild">0</value>
   <value type="bool" key="AutoTest.UseGlobal">true</value>
   <valuelist type="QVariantList" key="ClangCodeModel.CustomCommandLineKey"/>
   <value type="bool" key="ClangCodeModel.UseGlobalConfig">true</value>
   <value type="QString" key="ClangCodeModel.WarningConfigId">Builtin.BuildSystem</value>
   <valuemap type="QVariantMap" key="ClangTools">
    <value type="bool" key="ClangTools.AnalyzeOpenFiles">true</value>
    <value type="bool" key="ClangTools.BuildBeforeAnalysis">true</value>
    <value type="QString" key="ClangTools.DiagnosticConfig">Builtin.DefaultTidyAndClazy</value>
    <value type="int" key="ClangTools.ParallelJobs">8</value>
    <valuelist type="QVariantList" key="ClangTools.SelectedDirs"/>
    <valuelist type="QVariantList" key="ClangTools.SelectedFiles"/>
    <valuelist type="QVariantList" key="ClangTools.SuppressedDiagnostics"/>
    <value type="bool" key="ClangTools.UseGlobalSettings">true</value>
   </valuemap>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Target.0</variable>
  <valuemap type="QVariantMap">
   <value type="QString" key="DeviceType">Desktop</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Imported Kit</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Imported Kit</value>
   <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">{7b3aa816-69a8-4b8d-a91a-f25fc521a26d}</value>
   <value type="int" key="ProjectExplorer.Target.ActiveBuildConfiguration">0</value>
   <value type="int" key="ProjectExplorer.Target.ActiveDeployConfiguration">0</value>
   <value type="int" key="ProjectExplorer.Target.ActiveRunConfiguration">2</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.BuildConfiguration.0">
    <value type="QString" key="CMake.Build.Type">Release</value>
    <value type="QString" key="CMake.Initial.Parameters">-GEclipse CDT4 - Ninja
-DCMAKE_BUILD_TYPE:STRING=Release
-DCMAKE_PROJECT_INCLUDE_BEFORE:PATH=%{IDE:ResourcePath}/package-manager/auto-setup.cmake
-DQT_QMAKE_EXECUTABLE:STRING=%{Qt:qmakeExecutable}
-DCMAKE_PREFIX_PATH:STRING=%{Qt:QT_INSTALL_PREFIX}
-DCMAKE_C_COMPILER:STRING=%{Compiler:Executable:C}
-DCMAKE_CXX_COMPILER:STRING=%{Compiler:Executable:Cxx}</value>
    <value type="QString" key="CMake.Source.Directory">/home/shu/dev/cx/CX/CX</value>
    <value type="QString" key="ProjectExplorer.BuildConfiguration.BuildDirectory">/home/shu/dev/cx/CX/build_Release</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
       <value type="QString">all</value>
      </valuelist>
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Build</value>
    </valuemap>
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.1">
     <valuemap type="QVariantMap" key="ProjectExplorer.BuildStepList.Step.0">
      <valuelist type="QVariantList" key="CMakeProjectManager.MakeStep.BuildTargets">
       <value type="QString">clean</value>
      </valuelist>
      <value type="bool" key="ProjectExplorer.BuildStep.Enabled">true</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Build</value>
      <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.MakeStep</value>
     </valuemap>
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">1</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Clean</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Clean</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">2</value>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ClearSystemEnvironment">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.CustomParsers"/>
    <value type="bool" key="ProjectExplorer.BuildConfiguration.ParseStandardOutput">false</value>
    <valuelist type="QVariantList" key="ProjectExplorer.BuildConfiguration.UserEnvironmentChanges"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Release</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeBuildConfiguration</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.BuildConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.DeployConfiguration.0">
    <valuemap type="QVariantMap" key="ProjectExplorer.BuildConfiguration.BuildStepList.0">
     <value type="int" key="ProjectExplorer.BuildStepList.StepsCount">0</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DefaultDisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Deploy</value>
     <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.BuildSteps.Deploy</value>
    </valuemap>
    <value type="int" key="ProjectExplorer.BuildConfiguration.BuildStepListCount">1</value>
    <valuemap type="QVariantMap" key="ProjectExplorer.DeployConfiguration.CustomData"/>
    <value type="bool" key="ProjectExplorer.DeployConfiguration.CustomDataEnabled">false</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">ProjectExplorer.DefaultDeployConfiguration</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.DeployConfigurationCount">1</value>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.0">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">Catch</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.Catch</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">Catch</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.1">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">CorrectlyRenderTranslucentGeometry</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.CorrectlyRenderTranslucentGeometry</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">CorrectlyRenderTranslucentGeometry</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.2">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">CustusX</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.CustusX</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">CustusX</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.3">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">LogConsole</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.LogConsole</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">LogConsole</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.4">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">OpenIGTLinkServer</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.OpenIGTLinkServer</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">OpenIGTLinkServer</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.5">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">cxMemoryTester</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.cxMemoryTester</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">cxMemoryTester</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <valuemap type="QVariantMap" key="ProjectExplorer.Target.RunConfiguration.6">
    <value type="bool" key="Analyzer.Perf.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.QmlProfiler.Settings.UseGlobalSettings">true</value>
    <value type="bool" key="Analyzer.Valgrind.Settings.UseGlobalSettings">true</value>
    <valuelist type="QVariantList" key="CustomOutputParsers"/>
    <value type="int" key="PE.EnvironmentAspect.Base">2</value>
    <valuelist type="QVariantList" key="PE.EnvironmentAspect.Changes"/>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.DisplayName">sscPositionFileReader</value>
    <value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">CMakeProjectManager.CMakeRunConfiguration.sscPositionFileReader</value>
    <value type="QString" key="ProjectExplorer.RunConfiguration.BuildKey">sscPositionFileReader</value>
    <value type="bool" key="RunConfiguration.UseCppDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseCppDebuggerAuto">true</value>
    <value type="bool" key="RunConfiguration.UseLibrarySearchPath">true</value>
    <value type="bool" key="RunConfiguration.UseQmlDebugger">false</value>
    <value type="bool" key="RunConfiguration.UseQmlDebuggerAuto">true</value>
    <value type="QString" key="RunConfiguration.WorkingDirectory.default">/home/shu/dev/cx/CX/build_Release/bin</value>
   </valuemap>
   <value type="int" key="ProjectExplorer.Target.RunConfigurationCount">7</value>
  </valuemap>
 </data>
 <data>
  <variable>ProjectExplorer.Project.TargetCount</variable>
  <value type="int">1</value>
 </data>
 <data>
  <variable>ProjectExplorer.Project.Updater.FileVersion</variable>
  <value type="int">22</value>
 </data>
 <data>
  <variable>Version</variable>
  <value type="int">22</value>
 </data>
</qtcreator>
